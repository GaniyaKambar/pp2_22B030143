Python Classes
class IOString():
    def __init__(self):
        self.str1 = ""
​
    def get_String(self):
        self.str1 = input()
​
    def print_String(self):
        print(self.str1.upper())
​
str1 = IOString()
str1.get_String()
str1.print_String()
ganiya
GANIYA
2
class Shape():
    def __init__(self):
        pass
​
    def area(self):
        return 0
​
class Square(Shape):
    def __init__(self,length = 0):
        Shape.__init__(self)
        self.length = length
​
    def area(self):
        return self.length*self.length
​
Asqr = Square(5)
print(Asqr.area())      
​
print(Square().area()) 
25
0
3
class Shape():
    def __init__(self):
        pass
​
class Rectangle():
    def __init__(self,l,w):
        self.length = l
        self.width = w
​
    def area(self):
        return self.length*self.width
​
​
rect = Rectangle(2,4)
print(rect.area())
8
4. Point class
import math
​
​
class Point(object):
    """Class to handle point in a 2 dimensions space"""
​
    def __init__(self, x, y):
        """
        :param x: the value on the X-axis
        :type x: float
        :param y: the value on the Y-axis
        :type y: float
        """
        self.x = x
        self.y = y
​
​
    def show(self):
        """
        :return: the coordinate of this point
        :rtype: a tuple of 2 elements (float, float)
        """
        return self.x, self.y
​
​
    def move(self, x, y):
        """
        :param x: the value to move on the X-axis
        :type x: float
        :param y: the value to move on the Y-axis
        :type y: float
        """
        self.x += x
        self.y += y
​
​
    def dist(self, pt):
        """
        :param pt: the point to compute the distance with
        :type pt: :class:`Point` object
        :return: the distance between this point ant pt
        :rtype: int
        """
        dx = pt.x - self.x
        dy = pt.y - self.y
        return math.sqrt(dx ** 2 + dy ** 2)
5. Class account
class Account:
    def __init__(self,owner,balance=0):
        self.owner = owner
        self.balance = balance
        
    def __str__(self):
        return f'Account owner:   {self.owner}\nAccount balance: ${self.balance}'
        
    def deposit(self,dep_amt):
        self.balance += dep_amt
        print('Deposit Accepted')
        
    def withdraw(self,wd_amt):
        if self.balance >= wd_amt:
            self.balance -= wd_amt
            print('Withdrawal Accepted')
        else:
            print('Funds Unavailable!')
# 1. Instantiate the class
acct1 = Account('Jose',100)
# 2. Print the object
print(acct1)
Account owner:   Jose
Account balance: $100
# 3. Show the account owner attribute
acct1.owner
'Jose'
# 4. Show the account balance attribute
acct1.balance
# 5. Make a series of deposits and withdrawals
acct1.deposit(50)
Deposit Accepted
acct1.withdraw(75)
Withdrawal Accepted
# 6. Make a withdrawal that exceeds the available balance
acct1.withdraw(500)
Funds Unavailable!
def conver(grams):
    return 28.3495231 * grams

print(conver(int(input())))

def calc(F):
    return (5 / 9) * (F - 32)

print(calc(int(input())))

def func(x,y):
    if(y/4==x):
        return y
    for i in range(0,y):
        x -= 1
        y -= 2
        if(y/4 == x):
            return x

x = int(input())
y = int(input())
h = func(x,y)
l = x-func(x,y)
print(h)
print(l)

def filter_prime(x):
    y = []
    for i in range(0,len(x)):
        u = True
        for j in range(2,int(x[i]/2)):
            if(x[i]%j==0):
                u = False
                break
        if u == True:
            y.insert(0,x[i])
        
    return y            
    
        
x = [1,2,3,4,5,6,7,8,9,10,11]
y = filter_prime(x)
print(y)

def rev(a):
    b = (a).split()
    s = ""
    for i  in range(0,len(b)):
        s += b[len(b)-i-1]
        s += " "

    return s

a = "We are ready"
b = rev(a)
print(b)

def num(a):
    for i in range(0,len(a)):
        if(a[i]==3):
            if(a[i+1]==3):
                return True
    return False
    

a = [1,3,3,1]
x = num(a)
print(x)

def spy_game(nums):
    x = 2
    y = 1
    for i in range(0,len(nums)):
        if(nums[i]==0):
            x-=1
        if(nums[i]==7 and x<=0):
            y-=1
    if x!=2 and y!=1:
        return True
    return False

print(spy_game([1,2,4,0,0,7,5]))

print(spy_game([1,0,2,4,0,5,7]))

print(spy_game([1,7,2,0,4,5,0]))

import math

def comp(a):
    return (4*math.pi*(a**3))/3

print(comp(5))

def uni(x):
    y = [x[0],]
    for i range(0,len(x)):
        if

x = uni([3,3,3,4,1,3,7,8,1,9,3,3,4,5,0,4,10])
print(x)

def palind(s):
    size = int(len(s)/2)
    for i in range(0,size):
        if(s[i]!=s[len(s)-i-1]):
            return False
    return True

x = input()
print(palind(x))

def histo(x):
    for i in range(0,len(x)):
        for j in range(0,x[i]):
            print('*', end="")
        print()

histo([5,6,3])
import random
x = True
name = input("Hello what is your name?")
print(f"Well, {name}, I am thinking of a number between 1 and 20.")
y = random.randint(1,20)
cnt = 0;
while x:
    num = int(input())
    cnt += 1
    if(num > y):
        print("Your guess is to big")
        print("Take a guess")
    elif(num < y):
        print("Your guess is to low")
        print("Take a guess")
    else:
        print(f"Good job, KBTU! You guessed my number in {cnt} guesses!")
        x = False
        movies = [
{
"name": "Usual Suspects", 
"imdb": 7.0,
"category": "Thriller"
},
{
"name": "Hitman",
"imdb": 6.3,
"category": "Action"
},
{
"name": "Dark Knight",
"imdb": 9.0,
"category": "Adventure"
},
{
"name": "The Help",
"imdb": 8.0,
"category": "Drama"
},
{
"name": "The Choice",
"imdb": 6.2,
"category": "Romance"
},
{
"name": "Colonia",
"imdb": 7.4,
"category": "Romance"
},
{
"name": "Love",
"imdb": 6.0,
"category": "Romance"
},
{
"name": "Bride Wars",
"imdb": 5.4,
"category": "Romance"
},
{
"name": "AlphaJet",
"imdb": 3.2,
"category": "War"
},
{
"name": "Ringing Crime",
"imdb": 4.0,
"category": "Crime"
},
{
"name": "Joking muck",
"imdb": 7.2,
"category": "Comedy"
},
{
"name": "What is the name",
"imdb": 9.2,
"category": "Suspense"
},
{
"name": "Detective",
"imdb": 7.0,
"category": "Suspense"
},
{
"name": "Exam",
"imdb": 4.2,
"category": "Thriller"
},
{
"name": "We Two",
"imdb": 7.2,
"category": "Romance"
}
]

def check_score_greater(movies):
    for i in range(len(movies)):
        if(movies[i]['imdb']>5.5):
            return True
        else:
            return False

print(check_score_greater(movies))


def send_good_films(movies):
    for i in range(len(movies)):
        if(movies[i]['imdb']>5.5):
            print(movies[i]["name"])

print(send_good_films(movies))

def send_good_films(movies):
    for i in range(len(movies)):
        if(movies[i]['imdb'] > 10 and movies[i]['imdb'] < 15):
            print(movies[i]["name"])

print(send_good_films(movies))

def movie_b_cat(movies,cat):
    for i in range(len(movies)):
        if movies[i]["category"] == cat:
            print(movies[i]["name"])
        

print(movie_b_cat(movies,"Romance"))


def average(movies):
    sum = 0;
    cnt = 0;
    av = 0;
    for i in range(len(movies)):
        sum += movies[i]["imdb"]
        cnt += 1
        av = sum // cnt

print(average(movies))


def more_the_average(movies):
    aver = 7
    for i  in range(len(movies)):
        if movies[i]["imdb"] >= aver:
            print(movies[i]["category"])

print(more_the_average(movies))
